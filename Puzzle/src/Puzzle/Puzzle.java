package Puzzle;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Klasa odpowiada za wświetlanie elementów wizuanych oraz inicjalizowanie i sterowanie rozgrywką.
 * 
 */
import java.awt.Color;
import javax.swing.JFileChooser;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.util.*;
import java.awt.event.WindowEvent;

public class Puzzle extends javax.swing.JFrame {
    /**
     * Creates new form NewJFrame
     */
    public Puzzle() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        FileChooser = new javax.swing.JFileChooser();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTableTmp = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jTableSrc = new javax.swing.JTable();
        napisWygrales = new javax.swing.JLabel();
        etykietaZegara = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        WczytajPlik = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        StartItem = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        buttonPoczatkujacy = new javax.swing.JRadioButtonMenuItem();
        buttonZaawansowany = new javax.swing.JRadioButtonMenuItem();
        buttonEkspert = new javax.swing.JRadioButtonMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem5 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem6 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem7 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem8 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem9 = new javax.swing.JRadioButtonMenuItem();

        FileChooser.setDialogTitle("Wybór pliku z wzorem kolorów.");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Puzzle");
        setMinimumSize(new java.awt.Dimension(900, 700));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 800));

        jPanel1.setPreferredSize(new java.awt.Dimension(900, 900));

        jTableTmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableTmp.setAutoscrolls(false);
        jTableTmp.setCellSelectionEnabled(true);
        jTableTmp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableTmp.setFillsViewportHeight(true);
        jTableTmp.setPreferredSize(new java.awt.Dimension(600, 600));
        jTableTmp.setRowHeight(30);
        jTableTmp.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableTmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTmpMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTableTmp, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTableTmp, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTableTmp.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableTmp.getAccessibleContext().setAccessibleName("");
        jTableTmp.getAccessibleContext().setAccessibleDescription("");

        jPanel2.setPreferredSize(new java.awt.Dimension(420, 420));

        jTableSrc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableSrc.setAutoscrolls(false);
        jTableSrc.setCellSelectionEnabled(true);
        jTableSrc.setEnabled(false);
        jTableSrc.setFillsViewportHeight(true);
        jTableSrc.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jTableSrc, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTableSrc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        napisWygrales.setFont(new java.awt.Font("Tahoma", 2, 90)); // NOI18N
        napisWygrales.setForeground(new java.awt.Color(255, 0, 0));
        napisWygrales.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        etykietaZegara.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        etykietaZegara.setForeground(new java.awt.Color(0, 0, 255));
        etykietaZegara.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jMenu1.setText("Plik");

        WczytajPlik.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        WczytajPlik.setText("Wczytaj z pliku");
        WczytajPlik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WczytajPlikActionPerformed(evt);
            }
        });
        jMenu1.add(WczytajPlik);
        jMenu1.add(jSeparator1);

        StartItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        StartItem.setText("Start");
        StartItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartItemActionPerformed(evt);
            }
        });
        jMenu1.add(StartItem);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Zakończ");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opcje");

        jMenu3.setText("Poziom trudności");

        buttonGroup1.add(buttonPoczatkujacy);
        buttonPoczatkujacy.setText("Początkujący (5x5, 3 kolory)");
        buttonPoczatkujacy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPoczatkujacyActionPerformed(evt);
            }
        });
        jMenu3.add(buttonPoczatkujacy);

        buttonGroup1.add(buttonZaawansowany);
        buttonZaawansowany.setText("Zaawansowany (15x15, 6 kolorów, zamiana co 30 sekund)");
        buttonZaawansowany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZaawansowanyActionPerformed(evt);
            }
        });
        jMenu3.add(buttonZaawansowany);

        buttonGroup1.add(buttonEkspert);
        buttonEkspert.setText("Ekspert (30x30, 10 kolorów, zamiana co 10 sekund)");
        buttonEkspert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEkspertActionPerformed(evt);
            }
        });
        jMenu3.add(buttonEkspert);

        jMenu2.add(jMenu3);

        jMenu4.setText("Czas użytkownika");

        buttonGroup2.add(jRadioButtonMenuItem4);
        jRadioButtonMenuItem4.setText("2 minuty");
        jRadioButtonMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem4);

        buttonGroup2.add(jRadioButtonMenuItem5);
        jRadioButtonMenuItem5.setText("1 minuta");
        jRadioButtonMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem5);

        buttonGroup2.add(jRadioButtonMenuItem6);
        jRadioButtonMenuItem6.setText("40 sekund");
        jRadioButtonMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem6);

        buttonGroup2.add(jRadioButtonMenuItem7);
        jRadioButtonMenuItem7.setText("20 sekund");
        jRadioButtonMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem7);

        buttonGroup2.add(jRadioButtonMenuItem8);
        jRadioButtonMenuItem8.setText("10 sekund");
        jRadioButtonMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem8);

        buttonGroup2.add(jRadioButtonMenuItem9);
        jRadioButtonMenuItem9.setText("5 sekund");
        jRadioButtonMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem9);

        jMenu2.add(jMenu4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(napisWygrales, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addComponent(etykietaZegara, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etykietaZegara, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(napisWygrales, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WczytajPlikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WczytajPlikActionPerformed
        //Czyści napis końcowy o wygraniu w przypadku kolejnej gry
        napisWygrales.setText("");
        
        //Tworze okno otwierania pliku
        FileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Plik tekstowy .txt", "txt");
        FileChooser.setFileFilter(filter);
        FileReader Reader;
        String RowText = "";
        char[] a = new char[5000];
        int returnVal = FileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file = FileChooser.getSelectedFile();
           
            //Otwiera plik lub przechwytuje wyjątek błędu
            try {
                Reader = new FileReader( file ); 
                int CharCounter = Reader.read(a);
                Reader.close();
            
                //Tworzę jeden długi napis zawierający wszystkie znaki wczytywanego pliku
                for(int i = 0; i <= CharCounter; i++) {
                   RowText += a[i];
                }             
            } catch (IOException ex) {
              }
        } else {
          }
        
        //Towrzę obiekt klasy walidującej poprawność wczytywanego pliku
        FileValidator Validator = new FileValidator();
        
        try {  
            //Waliduje dane z wczytanego pliku i zwraca wynik w postaci tablicy kolorów
            Object[][] dataSrc = Validator.validate(RowText);
            
            //Dla tablicy 5x5
            if (dataSrc.length == 5) {
            //Umieszcza kolory z tabeli dataSrc w pomieszany sposób w tabeli dataTmp
            ColorDraw Generator = new ColorDraw();
            //Zmienne odnoszące się do tabel jTableSrc i jTableTmp
            String[] columnNames = {null, null, null, null, null};
            Object[][] dataTmp = Generator.mixColors(dataSrc);
            
            //Wczytanie rozmiaru siatki do tabel poprzez model
            modelSrc = new SourceModel(dataSrc, columnNames);
            modelTmp = new TemporaryModel(dataTmp, columnNames);
            
            //Ustawienie wysokości wierszy dla siatki 5x5
            jTableSrc.setEnabled(false);
            jTableSrc.setRowHeight(1); 
            jTableSrc.setModel(modelSrc);
            jTableSrc.setRowHeight(84); 
        
            jTableTmp.setEnabled(false);
            jTableTmp.setRowHeight(1);
            jTableTmp.setModel(modelTmp);
            jTableTmp.setRowHeight(180);
            jTableTmp.setEnabled(true);
        
            //Wyświetla kolory w poszczególnych komórkach tabel
            jTableSrc.setDefaultRenderer(Color.class,new SourceColorRenderer(true)); 
            jTableTmp.setDefaultRenderer(Color.class,new TemporaryColorRenderer(true)); 
              //Dla tablicy 15x15
            } else if (dataSrc.length == 15){
                //Umieszcza kolory z tabeli dataSrc w pomieszany sposób w tabeli dataTmp
                ColorDraw Generator = new ColorDraw();
                
                //Zmienne odnoszące się do tabel jTableSrc i jTableTmp
                String[] columnNames = {null, null, null, null, null,null, null, null, null, null,null, null, null, null, null};
                Object[][] dataTmp = Generator.mixColors(dataSrc);
            
                //Wczytanie rozmiaru siatki do tabel poprzez model
                modelSrc = new SourceModel(dataSrc, columnNames);
                modelTmp = new TemporaryModel(dataTmp, columnNames);
            
                //Ustawienie wysokości wierszy dla siatki 5x5
                jTableSrc.setEnabled(false);
                jTableSrc.setRowHeight(1); 
                jTableSrc.setModel(modelSrc);
                jTableSrc.setRowHeight(28); 
        
                jTableTmp.setEnabled(false);
                jTableTmp.setRowHeight(1);
                jTableTmp.setModel(modelTmp);
                jTableTmp.setRowHeight(60);
                jTableTmp.setEnabled(true);
        
                //Wyświetla kolory w poszczególnych komórkach tabel
                jTableSrc.setDefaultRenderer(Color.class,new SourceColorRenderer(true)); 
                jTableTmp.setDefaultRenderer(Color.class,new TemporaryColorRenderer(true)); 
                  //Dla tablicy 30x30
            }else if (dataSrc.length == 30){
                //Umieszcza kolory z tabeli dataSrc w pomieszany sposób w tabeli dataTmp
                
                ColorDraw Generator = new ColorDraw();
                
                //Zmienne odnoszące się do tabel jTableSrc i jTableTmp
                String[] columnNames = {null, null, null, null, null,null, null, null, null, null,null, null, null, null, null,null, null, null, null, null,null, null, null, null, null,null, null, null, null, null};
                Object[][] dataTmp = Generator.mixColors(dataSrc);
            
                //Wczytanie rozmiaru siatki do tabel poprzez model
                modelSrc = new SourceModel(dataSrc, columnNames);
                modelTmp = new TemporaryModel(dataTmp, columnNames);
            
                //Ustawienie wysokości wierszy dla siatki 5x5
                jTableSrc.setEnabled(false);
                jTableSrc.setRowHeight(1); 
                jTableSrc.setModel(modelSrc);
                jTableSrc.setRowHeight(14); 
        
                jTableTmp.setEnabled(false);
                jTableTmp.setRowHeight(1);
                jTableTmp.setModel(modelTmp);
                jTableTmp.setRowHeight(30);
                jTableTmp.setEnabled(true);
        
                //Wyświetla kolory w poszczególnych komórkach tabel
                jTableSrc.setDefaultRenderer(Color.class,new SourceColorRenderer(true)); 
                jTableTmp.setDefaultRenderer(Color.class,new TemporaryColorRenderer(true));  
            }               
          } catch (IOException ex) {
          }
    }//GEN-LAST:event_WczytajPlikActionPerformed

    private void StartItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartItemActionPerformed
        //Czyści napis końcowy o wygraniu w przypadku kolejnej gry
        napisWygrales.setText("");
        
        //Uruchamia dla wybranej opcji początkującego
        if (buttonPoczatkujacy.isSelected()) {    
            //Lista kolorów z której będą losowane do tablicy
            Color[] colors = {Color.GREEN, Color.YELLOW, Color.BLUE};
            ColorDraw Generator = new ColorDraw();           
            
            //Zmienne odnoszące się do tabel jTableSrc i jTableTmp
            String[] columnNames = {null, null, null, null, null};
            //Umieszcza losowe kolory w tabeli
            Object[][] dataSrc = {{Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)}};
        
            //Umieszcza kolory z tabeli dataSrc w pomieszany sposób w tabeli dataTmp
            Object[][] dataTmp = Generator.mixColors(dataSrc);
        
            //Wczytanie rozmiaru siatki do tabel poprzez model
            modelSrc = new SourceModel(dataSrc, columnNames);
            modelTmp = new TemporaryModel(dataTmp, columnNames);
        
            //Ustawienie wysokości wierszy dla siatki 5x5
            jTableSrc.setEnabled(false);
            jTableSrc.setRowHeight(1); 
            jTableSrc.setModel(modelSrc);
            jTableSrc.setRowHeight(84); 
        
            jTableTmp.setEnabled(false);
            jTableTmp.setRowHeight(1);
            jTableTmp.setModel(modelTmp);
            jTableTmp.setRowHeight(180);
            jTableTmp.setEnabled(true);
        
            //Wyświetla kolory w poszczególnych komórkach tabel
            jTableSrc.setDefaultRenderer(Color.class,new SourceColorRenderer(true)); 
            jTableTmp.setDefaultRenderer(Color.class,new TemporaryColorRenderer(true)); 
        } 
        
        //Uruchamia dla wybranej opcji zaawansowanego
        if (buttonZaawansowany.isSelected()) {              
            //Lista kolorów z której będą losowane do tablicy
            Color[] colors = {Color.GREEN, Color.YELLOW, Color.BLUE, Color.ORANGE, Color.MAGENTA};
            ColorDraw Generator = new ColorDraw();   
            
            //Zmienne odnoszące się do tabel jTableSrc i jTableTmp
            String[] columnNames = {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null};
            //Umieszcza losowe kolory w tabeli
            Object[][] dataSrc = {{Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)}};
        
            //Umieszcza kolory z tabeli dataSrc w pomieszany sposób w tabeli dataTmp
            Object[][] dataTmp = Generator.mixColors(dataSrc);
        
            //Wczytanie rozmiaru siatki do tabel poprzez model
            modelSrc = new SourceModel(dataSrc, columnNames);
            modelTmp = new TemporaryModel(dataTmp, columnNames);
        
            //Ustawienie wysokości wierszy dla siatki 5x5
            jTableSrc.setEnabled(false);
            jTableSrc.setRowHeight(1); 
            jTableSrc.setModel(modelSrc);
            jTableSrc.setRowHeight(28); 
        
            jTableTmp.setEnabled(false);
            jTableTmp.setRowHeight(1);
            jTableTmp.setModel(modelTmp);
            jTableTmp.setRowHeight(60);
            jTableTmp.setEnabled(true);
        
            //Wyświetla kolory w poszczególnych komórkach tabel
            jTableSrc.setDefaultRenderer(Color.class,new SourceColorRenderer(true)); 
            jTableTmp.setDefaultRenderer(Color.class,new TemporaryColorRenderer(true)); 
            
            // Tworzymy nowy obiekt klasy Zegar
            zegar = new Clock(etykietaZegara, ComputerTime, modelTmp, jTableTmp, jTableSrc);
            
            // Startujemy nasz zegar
            zegar.start();
        }
        
        //Uruchamia dla wybranej opcji zaawansowanego
        if (buttonEkspert.isSelected()) {                
            //Lista kolorów z której będą losowane do tablicy
            Color[] colors = {Color.GREEN, Color.YELLOW, Color.BLUE, Color.ORANGE, Color.MAGENTA, Color.BLACK, Color.CYAN, Color.GRAY, Color.PINK, Color.RED};
            ColorDraw Generator = new ColorDraw();           
            
            //Zmienne odnoszące się do tabel jTableSrc i jTableTmp
            String[] columnNames = {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null};
            //Umiszcza losowe kolory w tabeli
            Object[][] dataSrc = {{Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},   
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)}, 
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},   
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)}, 
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},   
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)}, 
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},   
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)},
                                  {Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors), Generator.generateColor (colors)}};        
            
            //Umieszcza kolory z tabeli dataSrc w pomieszany sposób w tabeli dataTmp
            Object[][] dataTmp = Generator.mixColors(dataSrc);
        
            //Wczytanie rozmiaru siatki do tabel poprzez model
            modelSrc = new SourceModel(dataSrc, columnNames);
            modelTmp = new TemporaryModel(dataTmp, columnNames);
        
            //Ustawienie wysokości wierszy dla siatki 5x5
            jTableSrc.setEnabled(false);
            jTableSrc.setRowHeight(1); 
            jTableSrc.setModel(modelSrc);
            jTableSrc.setRowHeight(14); 
        
            jTableTmp.setEnabled(false);
            jTableTmp.setRowHeight(1);
            jTableTmp.setModel(modelTmp);
            jTableTmp.setRowHeight(30);
            jTableTmp.setEnabled(true);
        
            //Wyświetla kolory w poszczególnych komórkach tabel
            jTableSrc.setDefaultRenderer(Color.class,new SourceColorRenderer(true)); 
            jTableTmp.setDefaultRenderer(Color.class,new TemporaryColorRenderer(true)); 
            
            // Tworzymy nowy obiekt klasy Zegar
            zegar = new Clock(etykietaZegara, ComputerTime, modelTmp, jTableTmp, jTableSrc);

            // Startujemy nasz zegar
            zegar.start();
        }        
    }//GEN-LAST:event_StartItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        zegar.stop();
        jTableTmp.setEnabled(false);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    // Ustawia poziom trudności zaawansowany poprzez zainicjalizowanie SourceModel o wymiarach 15x15 
    private void buttonZaawansowanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZaawansowanyActionPerformed

    }//GEN-LAST:event_buttonZaawansowanyActionPerformed

    // Ustawia poziom trudności początkujący poprzez zainicjalizowanie SourceModel o wymiarach 5x5 
    private void buttonPoczatkujacyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPoczatkujacyActionPerformed

    }//GEN-LAST:event_buttonPoczatkujacyActionPerformed

    // Ustawia poziom trudności ekspert poprzez zainicjalizowanie SourceModel o wymiarach 30x30 
    private void buttonEkspertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEkspertActionPerformed

    }//GEN-LAST:event_buttonEkspertActionPerformed

    private void jTableTmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTmpMouseClicked
        //Zmienna p przechowuje adres kliknięcia myszką
        java.awt.Point p = evt.getPoint();
        
        //Zmienne przechowują indeks wiersza i kolumny które zostały klinknięte
        int rowIndex = jTableTmp.rowAtPoint(p);
        int colIndex = jTableTmp.columnAtPoint(p);
        
        //Służą do przechowywania kolorów do ich wzajemnej zamiany
        Color FirstColor, SecondColor;
        
        //Warunek spełniony w przypadku pierwszego kliknięcia w komórkę tabeli
        if (Clicks[0][0] == null && Clicks[1][0] == null){
            Clicks[0][0] = rowIndex;
            Clicks[0][1] = colIndex;
            
          //Warunke spełniony w przypadku drugiego kliknięcia w komórkę tabeli
        } else if (Clicks[0][0] != null && Clicks[1][0] == null){
            Clicks[1][0] = rowIndex;
            Clicks[1][1] = colIndex;

            //Warunek spełniony w przypadku liknięcia komórek obok siebie poziomo
            if ((Clicks[0][0].intValue() == Clicks[1][0].intValue() && Clicks[0][1].intValue() == Clicks[1][1].intValue()-1) || (Clicks[0][0].intValue() == Clicks[1][0].intValue() && Clicks[0][1].intValue() == Clicks[1][1].intValue()+1)) {
                //Zmienne przechowują kolory z klikniętych komórek
                FirstColor = (Color)modelTmp.getValueAt(Clicks[0][0],Clicks[0][1]);
                SecondColor = (Color)modelTmp.getValueAt(Clicks[1][0],Clicks[1][1]);

                //Zamiana komórek kolorami
                modelTmp.setValueAt(FirstColor, Clicks[1][0], Clicks[1][1]);
                modelTmp.setValueAt(SecondColor, Clicks[0][0], Clicks[0][1]); 
                
                //Odświeżenie komórek w tabeli
                jTableTmp.repaint();
                                         
                //Wyczyszczenie zmiennych
                Clicks[0][0] = null;
                Clicks[0][1] = null;
                Clicks[1][0] = null;
                Clicks[1][1] = null;
                FirstColor = null;
                SecondColor = null;    
                
                //Porównanie równości obu tabel w celu zakończenia gry
                if (modelSrc.toString().equals(modelTmp.toString())) {
                   jTableTmp.setEnabled(false);
                   napisWygrales.setText("Wygrałeś!");
                }
                
            //Warunek spełniony w przypadku liknięcia komórek obok siebie pionowo    
            } else if ((Clicks[0][1].intValue() == Clicks[1][1].intValue() && Clicks[0][0].intValue() == Clicks[1][0].intValue()-1) || (Clicks[0][1].intValue() == Clicks[1][1].intValue() && Clicks[0][0].intValue() == Clicks[1][0].intValue()+1)) {
                //Zmienne przechowują kolory z klikniętych komórek
                FirstColor = (Color)modelTmp.getValueAt(Clicks[0][0],Clicks[0][1]);
                SecondColor = (Color)modelTmp.getValueAt(Clicks[1][0],Clicks[1][1]);
                
                //Zamiana komórek kolorami
                modelTmp.setValueAt(FirstColor, Clicks[1][0], Clicks[1][1]);
                modelTmp.setValueAt(SecondColor, Clicks[0][0], Clicks[0][1]);
                
                //Odświeżenie komórek w tabeli
                jTableTmp.repaint();
                           
                //Wyczyszczenie zmiennych
                Clicks[0][0] = null;
                Clicks[0][1] = null;
                Clicks[1][0] = null;
                Clicks[1][1] = null;
                FirstColor = null;
                SecondColor = null;
                
                //Porównanie równości obu tabel w celu zakończenia gry
                if (modelSrc.toString().equals(modelTmp.toString())) {
                    jTableTmp.setEnabled(false);
                    napisWygrales.setText("Wygrałeś!");   
                }
            
            //Warunek zachodzi w przypadku kliknięcia nieprzylegających komórek
            } else {
                //Wyczyszczenie zmiennych
                Clicks[0][0] = null;
                Clicks[0][1] = null;
                Clicks[1][0] = null;
                Clicks[1][1] = null;                
                FirstColor = null;
                SecondColor = null;
            }
        }
    }//GEN-LAST:event_jTableTmpMouseClicked

    private void jRadioButtonMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem4ActionPerformed
        ComputerTime = 120;
    }//GEN-LAST:event_jRadioButtonMenuItem4ActionPerformed

    private void jRadioButtonMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem5ActionPerformed
        ComputerTime = 60;
    }//GEN-LAST:event_jRadioButtonMenuItem5ActionPerformed

    private void jRadioButtonMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem6ActionPerformed
        ComputerTime = 40;
    }//GEN-LAST:event_jRadioButtonMenuItem6ActionPerformed

    private void jRadioButtonMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem7ActionPerformed
        ComputerTime = 20;
    }//GEN-LAST:event_jRadioButtonMenuItem7ActionPerformed

    private void jRadioButtonMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem8ActionPerformed
        ComputerTime = 10;
    }//GEN-LAST:event_jRadioButtonMenuItem8ActionPerformed

    private void jRadioButtonMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem9ActionPerformed
        ComputerTime = 5;
    }//GEN-LAST:event_jRadioButtonMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Puzzle().setVisible(true);    
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JMenuItem StartItem;
    private javax.swing.JMenuItem WczytajPlik;
    private javax.swing.JRadioButtonMenuItem buttonEkspert;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButtonMenuItem buttonPoczatkujacy;
    private javax.swing.JRadioButtonMenuItem buttonZaawansowany;
    private javax.swing.JLabel etykietaZegara;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem5;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem7;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem8;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTableSrc;
    private javax.swing.JTable jTableTmp;
    private javax.swing.JLabel napisWygrales;
    // End of variables declaration//GEN-END:variables
    //Zmienna przechowuje komórki kliknięć myszką na planszy
    private Clock zegar;
    private Integer[][] Clicks = {{null, null}, {null, null}};
    private TemporaryModel modelTmp;
    private SourceModel modelSrc;
    //Ustawia czas wykonywanie ruchu komputera z domyślną wartością w sekundach
    private int ComputerTime = 30;
}
